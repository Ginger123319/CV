!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AlgorithmBase	AlgorithmBase.py	/^class AlgorithmBase(object):$/;"	c	inherits:object
CycleList	util.py	/^class CycleList(object):$/;"	c	inherits:object
DEBUG	config.py	/^DEBUG = True$/;"	v
FireConstants	config.py	/^class FireConstants(object):$/;"	c	inherits:object
FirePredictor	FireDetection.py	/^class FirePredictor(object):$/;"	c	inherits:object
FirePredictor	bgsm.py	/^class FirePredictor(object):$/;"	c	inherits:object
FirePredictorController	FireDetection.py	/^class FirePredictorController(AlgorithmBase):$/;"	c	inherits:AlgorithmBase
GLOBAL_MIN_FPS	config.py	/^GLOBAL_MIN_FPS = 5$/;"	v
PointsRecorder	util.py	/^class PointsRecorder(object):$/;"	c	inherits:object
Q_len	config.py	/^Q_len = 100$/;"	v
__init__	AlgorithmBase.py	/^    def __init__(self, min_FPS, score_threshold, InputQ, OutputQ, img_Length):$/;"	m	class:AlgorithmBase	access:public
__init__	FireDetection.py	/^    def __init__(self, InputQ, OutputQ, min_FPS=5, score_threshold=.4, img_Length=500.0,$/;"	m	class:FirePredictorController	access:public
__init__	FireDetection.py	/^    def __init__(self, kernel_size=3, perimeterThreshold=120, bg_threshold=80, record_len=10, valid_num=8,$/;"	m	class:FirePredictor	access:public
__init__	bgsm.py	/^    def __init__(self, kernel_size=3, perimeterThreshold=120, bg_threshold=80, record_len=10, valid_num=8):$/;"	m	class:FirePredictor	access:public
__init__	config.py	/^    def __init__(self):$/;"	m	class:FireConstants	access:public
__init__	util.py	/^    def __init__(self, length):$/;"	m	class:CycleList	access:public
__init__	util.py	/^    def __init__(self, record_len=30, num_thr=25, dist_thr=100):$/;"	m	class:PointsRecorder	access:public
_cropImg	calcOpticalFlowFarneback.py	/^        _cropImg = frame_lwpCV[y:y + h, x:x + w, :]$/;"	v
background	calcOpticalFlowFarneback.py	/^        background = gray_lwpCV$/;"	v
background	calcOpticalFlowFarneback.py	/^background = None$/;"	v
bgsm_show	bgsm.py	/^def bgsm_show():$/;"	f	access:public
camera	calcOpticalFlowFarneback.py	/^camera = cv2.VideoCapture("\/home\/lijun\/Videos\/firemanyface_mv.avi")  # 参数0表示第一个摄像头$/;"	v
check	util.py	/^def check():$/;"	f	access:public
check2	util.py	/^def check2():$/;"	f	access:public
check_all	FireDetection.py	/^def check_all():$/;"	f	access:public
check_worker	bgsm.py	/^def check_worker():$/;"	f	access:public
clear_queue	FireDetection.py	/^def clear_queue(Q):$/;"	f	access:public
delete_last_item	util.py	/^    def delete_last_item(self):$/;"	m	class:CycleList	access:public
diff	calcOpticalFlowFarneback.py	/^    diff = cv2.absdiff(background, gray_lwpCV)$/;"	v
diff	calcOpticalFlowFarneback.py	/^    diff = cv2.dilate(diff, es, iterations=2)$/;"	v
diff	calcOpticalFlowFarneback.py	/^    diff = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)[1]$/;"	v
draw_line_width	config.py	/^draw_line_width = 3$/;"	v
draw_poly	util.py	/^def draw_poly(points, img):$/;"	f	access:public
es	calcOpticalFlowFarneback.py	/^es = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (9, 4))$/;"	v
fire_threshold	calcOpticalFlowFarneback.py	/^        fire_threshold = predict_imgs(_cropImg)$/;"	v
function_types_list	config.py	/^function_types_list = ['boundary', 'fire', 'leakage']$/;"	v
get_dict_key	util.py	/^def get_dict_key(dict, key, default=None):$/;"	f	access:public
get_len	util.py	/^    def get_len(self):$/;"	m	class:CycleList	access:public
get_numpy_points	util.py	/^    def get_numpy_points(self):$/;"	m	class:CycleList	access:public
gray_lwpCV	calcOpticalFlowFarneback.py	/^    gray_lwpCV = cv2.GaussianBlur(gray_lwpCV, (21, 21), 0)$/;"	v
gray_lwpCV	calcOpticalFlowFarneback.py	/^    gray_lwpCV = cv2.cvtColor(frame_lwpCV, cv2.COLOR_BGR2GRAY)$/;"	v
image_save_resize_ratio	config.py	/^image_save_resize_ratio = .3$/;"	v
insert	util.py	/^    def insert(self, item):$/;"	m	class:CycleList	access:public
kernel	calcOpticalFlowFarneback.py	/^kernel = np.ones((3, 3), np.uint8)$/;"	v
key	calcOpticalFlowFarneback.py	/^    key = cv2.waitKey(1) & 0xFF$/;"	v
kill	AlgorithmBase.py	/^    def kill(self):$/;"	m	class:AlgorithmBase	access:public
kill	FireDetection.py	/^    def kill(self):$/;"	m	class:FirePredictorController	access:public
loop	FireDetection.py	/^    def loop(self):$/;"	m	class:FirePredictorController	access:public
min_fps	config.py	/^min_fps = 1$/;"	v
predict_imgs	predict_image.py	/^def predict_imgs(img_BGR):$/;"	f	access:public
start	AlgorithmBase.py	/^    def start(self):$/;"	m	class:AlgorithmBase	access:public
start	FireDetection.py	/^    def start(self):$/;"	m	class:FirePredictorController	access:public
transfer_pts_to_int	util.py	/^def transfer_pts_to_int(points_list):$/;"	f	access:public
update	util.py	/^    def update(self, centerPoints):$/;"	m	class:PointsRecorder	access:public
update_camera_info	FireDetection.py	/^    def update_camera_info(self, camera_info_dict, task='on'):$/;"	m	class:FirePredictorController	access:public
warning_flag	util.py	/^    def warning_flag(self, centerPoint):$/;"	m	class:PointsRecorder	access:public
work	FireDetection.py	/^    def work(self, frame):$/;"	m	class:FirePredictor	access:public
work	bgsm.py	/^    def work(self, frame):$/;"	m	class:FirePredictor	access:public
